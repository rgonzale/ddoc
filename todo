have two screens
1. all domains showing number of requests, maybe syn packets and half open connections
2. one domain with requests

have two modes of runtime
1. greso mode - collect domains, get/post, urls, and src ips continually in both part 1 and part 2
2. light mode - collect domains get/post in part 1, urls and src ips in part 2, stop collecting data from the other part to lighten load

* ability to pause 'p' so you an copy URL into clipboard 
when user hits pause, a new Dptr is initialized and used while the interacts with the old Dptr.  When user hits unpause the new Dptr merges into the old
if there is a lot to merge I can simply create a thread to slowly merge the data instead of an expensive immediate operation

* ability of the pads to resize by a factor of 2, when limit is reached make new pad with 2x rows same columns delwin the old pad and use the new one

* make it take input from stdin so you can do stunnel | ddoc to handle SSL web traffic or have it to load up a private key to decrypt for a domain

* search function by hitting '/' and using 'n' and 'shift - n' for next and previous

* in Part2 have a 3rd pad stay at the top while scrolling, which will have domain name, total requests, get and post

* in Part1 have header be a 2nd pane to stay at the top while scrolling

* implement scrolling

* copy out current window to a log file

* have option to do NcursesPart1() or NcursesPart2 every few seconds to help with performance

* resize screen with 'r'

* make sure to account for the possibility of PUT OPTIONS DELETE http requests

* maybe add IP array to each request so that user can see IPs hitting single request

* when count reaches 1000 convert to 1k, when it goes to 1000k convert to 1m

command line args
	-i interface
	-l light mode(instead of greso mode)
	-d daemonize

* show POST payloads
* show if ip range is part of a CDN
* program shows it is using eth0 which is the default even when a server may be using eth1 as its primary interface(rackconnect servers)


possible
* show POST payloads
* maybe add IP array to each request so that user can see IPs hitting single request
* in CheckIfURLExists compare more bytes
* if req/ip/domain/ hits limit give error OR have mechanism to grow memory by factor of 2 if need be with realloac()
* output screen to file
* scroll in part2, IP, request separately
* search regex, n for next, shift n for previous
* split up program into prototypes, functions, main
* get autotools working to install ncurses-devel and libpcap-devel
* http status codes, 200 301/302, 404, 500

- runtime commands in PrintUsage
- fix index ->, it disappears
- show posts requests
- utf-8 encoding so %20 will show properly
- show POSTS only
